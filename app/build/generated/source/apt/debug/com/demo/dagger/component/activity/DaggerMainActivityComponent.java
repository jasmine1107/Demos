// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.demo.dagger.component.activity;

import com.demo.MainActivity;
import com.demo.MainActivity_MembersInjector;
import com.demo.dagger.module.activity.MainActivityModule;
import com.demo.dagger.module.activity.MainActivityModule_ProvidesMainActivityPresenterFactory;
import com.demo.presenter.activity.MainActivityPresenter;
import dagger.MembersInjector;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerMainActivityComponent implements MainActivityComponent {
  private Provider<MainActivityPresenter> ProvidesMainActivityPresenterProvider;

  private MembersInjector<MainActivity> mainActivityMembersInjector;

  private DaggerMainActivityComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.ProvidesMainActivityPresenterProvider =
        MainActivityModule_ProvidesMainActivityPresenterFactory.create(builder.mainActivityModule);

    this.mainActivityMembersInjector =
        MainActivity_MembersInjector.create(ProvidesMainActivityPresenterProvider);
  }

  @Override
  public void in(MainActivity activity) {
    mainActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private MainActivityModule mainActivityModule;

    private Builder() {}

    public MainActivityComponent build() {
      if (mainActivityModule == null) {
        throw new IllegalStateException(
            MainActivityModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerMainActivityComponent(this);
    }

    public Builder mainActivityModule(MainActivityModule mainActivityModule) {
      this.mainActivityModule = Preconditions.checkNotNull(mainActivityModule);
      return this;
    }
  }
}
